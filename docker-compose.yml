version: '3.8'

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  neo4j:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  rethinkdb:
    driver: ${VOLUMES_DRIVER}
  aerospike:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  mosquitto:
    driver: ${VOLUMES_DRIVER}
  cassandra:
    driver: ${VOLUMES_DRIVER}
  docker-in-docker:
    driver: ${VOLUMES_DRIVER}

services:
  ts-clean:
    build:
      context: ./
    ports:
      - "3000:3000"
    volumes:
      - ./:/usr/src/app
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: ts-clean-email

  fluentd:
    build: ./fluentd
    volumes:
      - ./fluentd/conf:/fluentd/etc
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    
  elasticsearch:
    image: elasticsearch
    expose:
      - 9200
    ports:
      - "9200:9200"

  kibana:
    image: kibana
    links:
      - "elasticsearch"
    ports:
      - "5601:5601"

  ### kafka ####################################################
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_MESSAGE_MAX_BYTES: 2000000
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - ${DATA_PATH_HOST}/kafka:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend

  ### kafka-manager ###########################################
  kafka-manager:
    image: sheepkiller/kafka-manager
    ports:
      - 9020:9000
    environment:
      ZK_HOSTS: zookeeper:2181
    networks:
      - backend

  ### ZooKeeper #########################################
  zookeeper:
    build: ./zookeeper
    volumes:
      - ${DATA_PATH_HOST}/zookeeper/data:/data
      - ${DATA_PATH_HOST}/zookeeper/datalog:/datalog
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - backend

  ### PostgreSQL ###########################################
  postgres:
  build:
    context: ./postgres
    args:
      - POSTGRES_VERSION=${POSTGRES_VERSION}
  volumes:
    - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
    - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
  ports:
    - "${POSTGRES_PORT}:5432"
  environment:
    - POSTGRES_DB=${POSTGRES_DB}
    - POSTGRES_USER=${POSTGRES_USER}
    - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  networks:
    - backend


  ### MongoDB ##############################################
  mongo:
    build: ./mongo
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
      - ${DATA_PATH_HOST}/mongo_config:/data/configdb
    networks:
      - backend

  ### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:19.03-dind
    environment:
      DOCKER_TLS_SAN: DNS:docker-in-docker
    privileged: true
    volumes:
      - ${APP_CODE_PATH_HOST}:${APP_CODE_PATH_CONTAINER}
      - docker-in-docker:/certs/client
    expose:
      - 2375
    networks:
      - backend
  
